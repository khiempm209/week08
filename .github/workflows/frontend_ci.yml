# week08/.github/workflows/frontend_ci.yml

name: Frontend CI - Build & Push Image

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External IP of Product Service'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External IP of Order Service (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'

  workflow_run:
    workflows: ["CD - Deploy Backend Services to AKS"]
    types:
      - completed
    branches:
      - main
  


# Define global environment variables that can be used across jobs
env:
  # ACR Login Server (e.g., myregistry.azurecr.io)
  # This needs to be set as a GitHub Repository Secret
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  # Dynamically generate image tags based on Git SHA and GitHub Run ID
  # This provides unique, traceable tags for each image build
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  build_and_push_frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Azure login using a Service Principal secret
    - name: Ensure repo is at latest remote tip for the branch
      # This guarantees all folders/files are updated to the latest commit on the branch (origin/<branch>)
      run: |
        # Determine branch name from GITHUB_REF; fallback to main if not a branch ref
        BRANCH="${GITHUB_REF#refs/heads/}"
        if [ "$BRANCH" = "$GITHUB_REF" ] || [ -z "$BRANCH" ]; then
          BRANCH="main"
        fi
        echo "Ensuring workspace matches origin/${BRANCH}"
        # Make sure origin/HEAD exists and fetch latest
        git remote set-head origin --auto || true
        git fetch --prune origin "${BRANCH}"
        git reset --hard "origin/${BRANCH}"
        # Remove any untracked files (safe for CI runner)
        git clean -fdx
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Login to Azure Container Registry (ACR)
    - name: Login to Azure Container Registry
      run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

    - name: Download artifact
      if: ${{ github.event_name != 'workflow_dispatch' }}
      uses: actions/download-artifact@v5
      with:
        name: ip-services-artifact
        repository: ${{ github.repository }} 
        github-token: ${{ secrets.GIT_PAT }}
        run-id: ${{ github.event.workflow_run.id }}
        path: download
        
    
    - name: Set IP address (from artifact or manual inputs)
      run: |
        if [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
          # source the env file to populate $C and $D
          if [ ! -f download/id_address_vars.env ]; then
            echo "The IP address artifact not found"
            exit 1
          fi
          # shell-safe load
          set -o allexport
          source download/id_address_vars.env
          set +o allexport
        else
          PRODUCT_IP="${{ inputs.product_api_ip }}"
          ORDER_IP="${{ inputs.order_api_ip  }}"
        fi
        echo "PRODUCT_IP=$PRODUCT_IP" >> $$GITHUB_ENV
        echo "ORDER_IP=$ORDER_IP" >> $$GITHUB_ENV


    - name: Inject Backend IPs into Frontend main.js
      run: |
        echo "Injecting IPs into frontend/static/js/main.js"
        # Ensure frontend/main.js is directly in the path for sed
        echo "${{ env.PRODUCT_IP }}"
        echo "${{ env.ORDER_IP }}"
        sed -i "s|_PRODUCT_API_URL_|${{ env.PRODUCT_IP }}|g" frontend/main.js
        sed -i "s|_ORDER_API_URL_|${{ env.ORDER_IP }}|g" frontend/main.js
        
        # Display the modified file content for debugging
        echo "--- Modified main.js content ---"
        cat frontend/main.js
        echo "---------------------------------"

    # Build and Push Docker image for Frontend
    - name: Build and Push Frontend Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
        docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

    # Logout from Azure for security (runs even if image push fails)
    - name: Logout from Azure
      run: az logout
      if: always()
